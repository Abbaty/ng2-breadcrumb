{"version":3,"sources":["src/breadcrumb/breadcrumb.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA+B,eAAe,CAAC,CAAA;AAC/C,uBAAuC,iBAAiB,CAAC,CAAA;AACzD,uBAAsE,iBAAiB,CAAC,CAAA;AAExF;;;;GAIG;AAkBH;IAMI,6BAAoB,MAAc;QANtC,iBAwDC;QAlDuB,WAAM,GAAN,MAAM,CAAQ;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,KAAK;YACxB,KAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,gCAAgC;YACvD,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,KAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC,CAAC,CAAA;IACN,CAAC;IAED,qDAAuB,GAAvB,UAAwB,GAAW;QAC/B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,kHAAkH;QAC3I,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,4BAA4B;QACnG,CAAC;IACL,CAAC;IAED,wCAAU,GAAV,UAAW,GAAW;QAClB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;IAED,0CAAY,GAAZ,UAAa,GAAW;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,GAAG,CAAC,CAAC,CAAC;YAC1B,IAAI,KAAK,SAAiB,CAAC;YAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;gBAClD,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC5B,EAAE,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;gBACpB,CAAC;YACL,CAAC;QACL,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAED,sBAAI,qCAAI;aAAR;YACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACtB,CAAC;aAED,UAAS,KAAK;YACV,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACvB,CAAC;;;OAJA;IAMD,sBAAI,0CAAS;aAAb;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;aAED,UAAc,KAAK;YACf,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAC5B,CAAC;;;OAJA;IAhDD;QAAC,YAAK,CAAC,aAAa,CAAC;;4DAAA;IAnBzB;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,YAAY;YACtB,UAAU,EAAE,CAAC,wBAAe,EAAE,0BAAiB,EAAE,gBAAO,CAAC;YACzD,QAAQ,EAAE,mjBAYT;SACJ,CAAC;;2BAAA;IAyDF,0BAAC;AAAD,CAxDA,AAwDC,IAAA;AAxDY,2BAAmB,sBAwD/B,CAAA","file":"src/breadcrumb/breadcrumb.js","sourcesContent":["import {Component, Input} from 'angular2/core';\nimport {FORM_DIRECTIVES, NgClass} from 'angular2/common';\nimport {ROUTER_DIRECTIVES, RouteConfig, Router, RouteDefinition} from 'angular2/router';\n\n/**\n * This component shows a router's paths as breadcrumb trails and allows you to navigate to any of them.\n * It subscribes to the router in order to update the breadcrumb trail as you navigate to a component.\n * By providing a RouteConfig the component will be able to use the 'as' name to display in the breadcrumbs links.\n */\n@Component({\n    selector: 'breadcrumb',\n    directives: [FORM_DIRECTIVES, ROUTER_DIRECTIVES, NgClass],\n    template: `\n        <div class=\"sub-header\">\n            <h2 id=\"page-title\">{{friendlyName(activeUrl)}}</h2>\n            <div>\n                <ul class=\"breadcrumb\">\n                    <li *ngFor=\"#url of urls; #last = last\" [ngClass]=\"{'active': last}\"> <!-- disable link of last item -->\n                        <a *ngIf=\"!last\" (click)=\"navigateTo(url)\">{{friendlyName(url)}}</a>\n                        <span *ngIf=\"last\">{{friendlyName(url)}}</span>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    `\n})\nexport class BreadcrumbComponent {\n\n    @Input('routeConfig') routeConfig: RouteDefinition[];\n    private _urls: String[];\n    private _activeUrl: String;\n    \n    constructor(private router: Router) {\n        this._urls = new Array();\n        this.router.subscribe((value) => {\n            this._urls.length = 0; //Fastest way to clear out array\n            this._activeUrl = value;\n            this.generateBreadcrumbTrail(value);\n        })\n    }\n\n    generateBreadcrumbTrail(url: String): void {\n        this._urls.unshift(url); //Add url to beginning of array (since the url is being recursively broken down from full url to its parent paths)\n        if (url.lastIndexOf('/') > 0) {\n            this.generateBreadcrumbTrail(url.substr(0, url.lastIndexOf('/'))); //Recursively add parent url\n        }\n    }\n\n    navigateTo(url: string): void {\n        this.router.navigateByUrl(url);\n    }\n\n    friendlyName(url: String): String {\n        if (this.routeConfig && url) {\n            let route: RouteDefinition;\n            for (let i = 0; i < this.routeConfig.length; i += 1) {\n                route = this.routeConfig[i];\n                if (url == route.path) {\n                    return route.as;\n                }\n            }\n        }\n\n        return url;\n    }\n\n    get urls() {\n        return this._urls;\n    }\n\n    set urls(value) {\n        this._urls = value;\n    }\n\n    get activeUrl() {\n        return this._activeUrl;\n    }\n\n    set activeUrl(value) {\n        this._activeUrl = value;\n    }\n\n}\n"],"sourceRoot":"/source/"}