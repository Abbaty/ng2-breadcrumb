{"version":3,"sources":["src/breadcrumb/breadcrumb.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA+B,eAAe,CAAC,CAAA;AAC/C,uBAAuC,iBAAiB,CAAC,CAAA;AACzD,uBAAwC,iBAAiB,CAAC,CAAA;AAG1D;;;;GAIG;AAmCH;IAKI,6BAAoB,MAAc;QALtC,iBA+CC;QA1CuB,WAAM,GAAN,MAAM,CAAQ;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC;YAC1B,KAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,iCAAiC;YACxD,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACjC,kCAAkC;QACtC,CAAC,CAAC,CAAA;IACN,CAAC;IAED,qDAAuB,GAAvB,UAAwB,GAAW;QAC/B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,mHAAmH;QAC5I,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,6BAA6B;QACpG,CAAC;IACL,CAAC;IAED,wCAAU,GAAV,UAAW,GAAW;QAClB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;IAED,0CAAY,GAAZ,UAAa,GAAW;QACpB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,GAAG,CAAC,CAAC,CAAC;YAC1B,IAAI,KAAK,SAAiB,CAAC;YAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;gBAClD,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC5B,EAAE,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;gBACpB,CAAC;YACL,CAAC;QACL,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAED,sBAAI,qCAAI;aAAR;YACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACtB,CAAC;aAED,UAAS,KAAK;YACV,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACvB,CAAC;;;OAJA;IAvCD;QAAC,YAAK,CAAC,aAAa,CAAC;;4DAAA;IApCzB;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,YAAY;YACtB,UAAU,EAAE,CAAC,wBAAe,EAAE,0BAAiB,EAAE,gBAAO,CAAC;YACzD,QAAQ,EAAE,2YAST;YACD,MAAM,EAAE,CAAC,6bAmBT,CAAC;SACJ,CAAC;;2BAAA;IAgDF,0BAAC;AAAD,CA/CA,AA+CC,IAAA;AA/CY,2BAAmB,sBA+C/B,CAAA","file":"src/breadcrumb/breadcrumb.js","sourcesContent":["import {Component, Input} from '@angular/core';\nimport {FORM_DIRECTIVES, NgClass} from '@angular/common';\nimport {ROUTER_DIRECTIVES, Router} from '@angular/router';\nimport {RouteConfig, RouteDefinition} from '@angular/router-deprecated';\n\n/**\n * This component shows a router's paths as breadcrumb trails and allows you to navigate to any of them.\n * It subscribes to the router in order to update the breadcrumb trail as you navigate to a component.\n * By providing a RouteConfig the component will be able to use the 'as' name to display in the breadcrumbs links.\n */\n@Component({\n    selector: 'breadcrumb',\n    directives: [FORM_DIRECTIVES, ROUTER_DIRECTIVES, NgClass],\n    template: `\n      <div>\n          <ul class=\"breadcrumb\">\n              <li *ngFor=\"#url of urls; #last = last\" [ngClass]=\"{'active': last}\"> <!-- disable link of last item -->\n                  <a *ngIf=\"!last\" (click)=\"navigateTo(url)\">{{friendlyName(url)}}</a>\n                  <span *ngIf=\"last\">{{friendlyName(url)}}</span>\n              </li>\n          </ul>\n      </div>\n    `,\n    styles: [`\n      .breadcrumb {\n        padding: 8px 15px;\n        margin-bottom: 20px;\n        list-style: none;\n        background-color: transparent;\n        border-radius: 3px;\n      }\n      .breadcrumb > li {\n        display: inline-block;\n      }\n      .breadcrumb > li + li:before {\n        content: \"/\";\n        padding: 0 5px;\n        color: #999999;\n      }\n      .breadcrumb > .active {\n        color: #555555;\n      }\n   `]\n})\nexport class BreadcrumbComponent {\n\n    @Input('routeConfig') routeConfig: RouteDefinition[];\n    private _urls: String[];\n\n    constructor(private router: Router) {\n        this._urls = new Array();\n        this.router.changes.subscribe(() => {\n            this._urls.length = 0; // Fastest way to clear out array\n            console.log(this.router.urlTree);\n            // this.generateBreadcrumbTrail();\n        })\n    }\n\n    generateBreadcrumbTrail(url: String): void {\n        this._urls.unshift(url); // Add url to beginning of array (since the url is being recursively broken down from full url to its parent paths)\n        if (url.lastIndexOf('/') > 0) {\n            this.generateBreadcrumbTrail(url.substr(0, url.lastIndexOf('/'))); // Recursively add parent url\n        }\n    }\n\n    navigateTo(url: string): void {\n        this.router.navigateByUrl(url);\n    }\n\n    friendlyName(url: String): String {\n        if (this.routeConfig && url) {\n            let route: RouteDefinition;\n            for (let i = 0; i < this.routeConfig.length; i += 1) {\n                route = this.routeConfig[i];\n                if (url == route.path) {\n                    return route.as;\n                }\n            }\n        }\n\n        return url;\n    }\n\n    get urls() {\n        return this._urls;\n    }\n\n    set urls(value) {\n        this._urls = value;\n    }\n\n}\n"],"sourceRoot":"/source/"}